(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{525:function(s,t,n){"use strict";n.r(t);var a=n(6),e=Object(a.a)({},(function(){var s=this,t=s.$createElement,n=s._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h2",{attrs:{id:"compose-和-docker-兼容性"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#compose-和-docker-兼容性"}},[s._v("#")]),s._v(" Compose 和 Docker 兼容性")]),s._v(" "),n("p",[s._v("Compose 文件格式有 3 个版本,分别为 1, 2.x 和 3.x\n目前主流的为 3.x 其支持 docker 1.13.0 及其以上的版本")]),s._v(" "),n("h2",{attrs:{id:"常用参数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#常用参数"}},[s._v("#")]),s._v(" 常用参数")]),s._v(" "),n("div",{staticClass:"language-yaml line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-yaml"}},[n("code",[n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("version")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"3"')]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 指定 compose 文件的版本")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("services")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 定义所有的 service 信息, services 下面的第一级别的 key 既是一个 service 的名称")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("container_id")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("build")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 指定包含构建上下文的路径, 或作为一个对象，该对象具有 context 和指定的 dockerfile 文件以及 args 参数值")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("context")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" ./my_dir "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# context: 指定 Dockerfile 文件所在的路径")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("dockerfile")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" Dockerfile "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# dockerfile: 指定 context 指定的目录下面的 Dockerfile 的名称(默认为 Dockerfile)")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("args")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# args: Dockerfile 在 build 过程中需要的参数 (等同于 docker container build --build-arg 的作用)")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("my_arg")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"value"')]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("cache_from")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# v3.2中新增的参数, 指定缓存的镜像列表 (等同于 docker container build --cache_from 的作用)")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v(" alpine"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("latest\n      "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("labels")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# v3.3中新增的参数, 设置镜像的元数据 (等同于 docker container build --labels 的作用)")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("com.example.group")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"value"')]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("shm_size")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"2gb"')]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# v3.5中新增的参数, 设置容器 /dev/shm 分区的大小 (等同于 docker container build --shm-size 的作用)")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("command")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" uname "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("a "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 覆盖容器启动后默认执行的命令, 支持 shell 格式和 [] 格式")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("configs")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 不知道怎么用")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v(" my_config\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("cgroup_parent")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" m"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("executor"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("abcd "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 不知道怎么用")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("container_name")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" my_name "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 指定容器的名称 (等同于 docker run --name 的作用)")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("credential_spec")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 不知道怎么用")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("file")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" my"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("credential"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("spec.json\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("deploy")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# v3 版本以上, 指定与部署和运行服务相关的配置, deploy 部分是 docker stack 使用的, docker stack 依赖 docker swarm")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("endpoint_mode")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" vip "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# v3.3 版本中新增的功能, 指定服务暴露的方式")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# vip                   # Docker 为该服务分配了一个虚拟 IP(VIP), 作为客户端的访问服务的地址")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# dnsrr                 # DNS轮询, Docker 为该服务设置 DNS 条目, 使得服务名称的 DNS 查询返回一个 IP 地址列表, 客户端直接访问其中的一个地址")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("labels")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 指定服务的标签，这些标签仅在服务上设置")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("com.example.desc")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"value"')]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("mode")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" global "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 指定 deploy 的模式")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# global                # 每个集群节点都只有一个容器")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# replicated            # 用户可以指定集群中容器的数量(默认)")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("placement")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 不知道怎么用")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("max_replicas_per_node")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("replicas")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# deploy 的 mode 为 replicated 时, 指定容器副本的数量")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("resources")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 资源限制")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("limits")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 设置容器的资源限制")]),s._v("\n          "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("cpus")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"0.5"')]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 设置该容器最多只能使用 50% 的 CPU")]),s._v("\n          "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("memory")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" 50M "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 设置该容器最多只能使用 50M 的内存空间")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("reservations")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 设置为容器预留的系统资源(随时可用)")]),s._v("\n          "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("cpus")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"0.2"')]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 为该容器保留 20% 的 CPU")]),s._v("\n          "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("memory")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" 20M "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 为该容器保留 20M 的内存空间")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("restart_policy")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 定义容器重启策略, 用于代替 restart 参数")]),s._v("\n          "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("condition")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n            none "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 定义容器重启策略(接受三个参数)")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# none                  # 不尝试重启")]),s._v("\n          "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# on-failure            # 只有当容器内部应用程序出现问题才会重启")]),s._v("\n          "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# any                   # 无论如何都会尝试重启(默认)")]),s._v("\n          "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("delay")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" 5s "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 尝试重启的间隔时间(默认为 0s)")]),s._v("\n          "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("max_attempts")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 尝试重启次数(默认一直尝试重启)")]),s._v("\n          "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("window")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("120")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 检查重启是否成功之前的等待时间(即如果容器启动了, 隔多少秒之后去检测容器是否正常, 默认 0s)")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("update_config")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 用于配置滚动更新配置")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("parallelism")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 一次性更新的容器数量")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("delay")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" 10s "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 更新一组容器之间的间隔时间")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("failure_action")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n          continue "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 定义更新失败的策略")]),s._v("\n          "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# continue              # 继续更新")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# rollback              # 回滚更新")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# pause                 # 暂停更新(默认)")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("monitor")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" 10s "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 每次更新后的持续时间以监视更新是否失败(单位: ns|us|ms|s|m|h) (默认为0)")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("max_failure_ratio")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 回滚期间容忍的失败率(默认值为0)")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("order")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" stop"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("first "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# v3.4 版本中新增的参数, 回滚期间的操作顺序")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# stop-first            #旧任务在启动新任务之前停止(默认)")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# start-first           #首先启动新任务, 并且正在运行的任务暂时重叠")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("rollback_config")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# v3.7 版本中新增的参数, 用于定义在 update_config 更新失败的回滚策略")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("parallelism")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 一次回滚的容器数, 如果设置为0, 则所有容器同时回滚")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("delay")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 每个组回滚之间的时间间隔(默认为0)")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("failure_action")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" continue "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 定义回滚失败的策略")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# continue              # 继续回滚")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# pause                 # 暂停回滚")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("monitor")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" 10s "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 每次回滚任务后的持续时间以监视失败(单位: ns|us|ms|s|m|h) (默认为0)")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("max_failure_ratio")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 回滚期间容忍的失败率(默认值0)")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("order")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" stop"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("first "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 回滚期间的操作顺序")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# stop-first            # 旧任务在启动新任务之前停止(默认)")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# start-first           # 首先启动新任务, 并且正在运行的任务暂时重叠")]),s._v("\n\n      "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 注意：")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 支持 docker-compose up 和 docker-compose run 但不支持 docker stack deploy 的子选项")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#     security_opt  container_name  devices  tmpfs  stop_signal  links    cgroup_parent")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#     network_mode  external_links  restart  build  userns_mode  sysctls")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("devices")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 指定设备映射列表 (等同于 docker run --device 的作用)")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"/dev/ttyUSB0:/dev/ttyUSB0"')]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("depends_on")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 定义容器启动顺序 (此选项解决了容器之间的依赖关系， 此选项在 v3 版本中 使用 swarm 部署时将忽略该选项)")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v(" container_id_2\n      "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 示例：")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# docker-compose up 以依赖顺序启动服务，下面例子中 redis 和 db 服务在 web 启动前启动")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 默认情况下使用 docker-compose up web 这样的方式启动 web 服务时，也会启动 redis 和 db 两个服务，因为在配置文件中定义了依赖关系")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# version: '3'")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# services:")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#     web:")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#         build: .")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#         depends_on:")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#             - db")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#             - redis")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#     redis:")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#         image: redis")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#     db:")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#         image: postgres")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("dns")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 设置 DNS 地址(等同于 docker run --dns 的作用)")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v(" 8.8.8.8\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v(" 4.4.4.4\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("dns_search")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 设置 DNS 搜索域(等同于 docker run --dns-search 的作用)")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v(" dc1.example.com\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v(" dc2.example.com\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("tmpfs")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# v2 版本以上, 挂载目录到容器中, 作为容器的临时文件系统(等同于 docker run --tmpfs 的作用, 在使用 swarm 部署时将忽略该选项)")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v(" /run\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v(" /tmp\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("entrypoint")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" uname "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("a "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 覆盖容器的默认 entrypoint 指令 (等同于 docker run --entrypoint 的作用)")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("env_file")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 从指定文件中读取变量设置为容器中的环境变量, 可以是单个值或者一个文件列表, 如果多个文件中的变量重名则后面的变量覆盖前面的变量, environment 的值覆盖 env_file 的值")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v(" ./.env\n      "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 文件格式：")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#    RACK_ENV=development")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("environment")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 设置环境变量， environment 的值可以覆盖 env_file 的值 (等同于 docker run --env 的作用)")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("MY_ENV")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"value"')]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("expose")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 暴露端口, 但是不能和宿主机建立映射关系, 类似于 Dockerfile 的 EXPOSE 指令")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"80"')]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("external_links")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 连接不在 docker-compose.yml 中定义的容器或者不在 compose 管理的容器(docker run 启动的容器, 在 v3 版本中使用 swarm 部署时将忽略该选项)")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v(" my_network\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("extra_hosts")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 添加 host 记录到容器中的 /etc/hosts 中 (等同于 docker run --add-host 的作用)")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"somehost:162.242.195.82"')]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"otherhost:50.31.209.229"')]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("healthcheck")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# v2.1 以上版本, 定义容器健康状态检查, 类似于 Dockerfile 的 HEALTHCHECK 指令")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("test")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"CMD"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"curl"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"-f"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"http://localhost"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 检查容器检查状态的命令, 该选项必须是一个字符串或者列表, 第一项必须是 NONE, CMD 或 CMD-SHELL, 如果其是一个字符串则相当于 CMD-SHELL 加该字符串")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# NONE                  # 禁用容器的健康状态检测")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# CMD                   # test: ["CMD", "curl", "-f", "http://localhost"]')]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# CMD-SHELL             # test: ["CMD-SHELL", "curl -f http://localhost || exit 1"] 或者　test: curl -f https://localhost || exit 1')]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("interval")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" 1m30s "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 每次检查之间的间隔时间")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("timeout")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" 10s "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 运行命令的超时时间")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("retries")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 重试次数")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("start_period")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" 40s "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# v3.4 以上新增的选项, 定义容器启动时间间隔")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("disable")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token boolean important"}},[s._v("true")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# true 或 false, 表示是否禁用健康状态检测和　test: NONE 相同")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("image")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" nginx "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 指定 docker 镜像, 可以是远程仓库镜像、本地镜像")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("init")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token boolean important"}},[s._v("true")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# v3.7 中新增的参数, true 或 false 表示是否在容器中运行一个 init, 它接收信号并传递给进程")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("isolation")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" default "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 隔离容器技术, 在 Linux 中仅支持 default 值")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("labels")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 使用 Docker 标签将元数据添加到容器, 与 Dockerfile 中的 LABELS 类似")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("com.example.group")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"value"')]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("links")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 链接到其它服务中的容器, 该选项是 docker 历史遗留的选项, 目前已被用户自定义网络名称空间取代, 最终有可能被废弃 (在使用 swarm 部署时将忽略该选项)")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"db"')]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("logging")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 设置容器日志服务")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("driver")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" syslog "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 指定日志记录驱动程序, 默认 json-file (等同于 docker run --log-driver 的作用)")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("options")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 指定日志的相关参数 (等同于 docker run --log-opt 的作用)")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("max-size")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"200k"')]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 设置单个日志文件的大小, 当到达这个值后会进行日志滚动操作")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("max-file")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 日志文件保留的数量")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("network_mode")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"bridge"')]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 指定网络模式 (等同于 docker run --net 的作用, 在使用 swarm 部署时将忽略该选项)")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("networks")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 将容器加入指定网络 (等同于 docker network connect 的作用), networks 可以位于 compose 文件顶级键和 services 键的二级键")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("my_network")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("aliases")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" my_network_alias "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 同一网络上的容器可以使用服务名称或别名连接到其中一个服务的容器")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("ipv4_address")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" 172.16.238.10 "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# IP V4 格式")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("ipv6_address")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" 2001"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("3984"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("3989"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# IP V6 格式")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 示例:")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#     version: '3.7'")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#     services:")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#         test:")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#             image: nginx:1.14-alpine")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#             container_name: mynginx")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#             command: ifconfig")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#             networks:")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#                 app_net:                                # 调用下面 networks 定义的 app_net 网络")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#                 ipv4_address: 172.16.238.10")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#     networks:")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#         app_net:")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#             driver: bridge")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#             ipam:")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#                 driver: default")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#                 config:")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#                     - subnet: 172.16.238.0/24")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("pid")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"host"')]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 共享宿主机的 进程空间(PID)")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("ports")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 建立宿主机和容器之间的端口映射关系, ports 支持两种语法格式")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3000")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# SHORT 语法格式示例:")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v('#     - "3000"                            # 暴露容器的 3000 端口, 宿主机的端口由 docker 随机映射一个没有被占用的端口')]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v('#     - "3000-3005"                       # 暴露容器的 3000 到 3005 端口, 宿主机的端口由 docker 随机映射没有被占用的端口')]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v('#     - "8000:8000"                       # 容器的 8000 端口和宿主机的 8000 端口建立映射关系')]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v('#     - "9090-9091:8080-8081"')]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v('#     - "127.0.0.1:8001:8001"             # 指定映射宿主机的指定地址的')]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v('#     - "127.0.0.1:5000-5010:5000-5010"')]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v('#     - "6060:6060/udp"                   # 指定协议')]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# LONG 语法格式示例:(v3.2 新增的语法格式)")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#     ports:")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#         - target: 80                    # 容器端口")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#           published: 8080               # 宿主机端口")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#           protocol: tcp                 # 协议类型")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#           mode: host                    # host 在每个节点上发布主机端口,  ingress 对于群模式端口进行负载均衡")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#secrets               # 不知道怎么用")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("security_opt")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 为每个容器覆盖默认的标签 (在使用 swarm 部署时将忽略该选项)")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v(" label"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("user"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("USER\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v(" label"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("role"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("ROLE\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("stop_grace_period")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" 1s "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 指定在发送了 SIGTERM 信号之后, 容器等待多少秒之后退出(默认 10s)")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("stop_signal")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" SIGUSR1 "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 指定停止容器发送的信号 (默认为 SIGTERM 相当于 kill PID; SIGKILL 相当于 kill -9 PID; 在使用 swarm 部署时将忽略该选项)")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("sysctls")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 设置容器中的内核参数 (在使用 swarm 部署时将忽略该选项)")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("net.core.somaxconn")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1024")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("net.ipv4.tcp_syncookies")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("ulimits")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 设置容器的 limit")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("nproc")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("65535")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("nofile")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n          "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("soft")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("20000")]),s._v("\n          "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("hard")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("40000")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("userns_mode")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"host"')]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 如果Docker守护程序配置了用户名称空间, 则禁用此服务的用户名称空间 (在使用 swarm 部署时将忽略该选项)")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("volumes")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 定义容器和宿主机的卷映射关系, 其和 networks 一样可以位于 services 键的二级键和 compose 顶级键, 如果需要跨服务间使用则在顶级键定义, 在 services 中引用")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v(" ./data"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("/data\n      "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# SHORT 语法格式示例:")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#     volumes:")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#         - /var/lib/mysql                # 映射容器内的 /var/lib/mysql 到宿主机的一个随机目录中")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#         - /opt/data:/var/lib/mysql      # 映射容器内的 /var/lib/mysql 到宿主机的 /opt/data")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#         - ./cache:/tmp/cache            # 映射容器内的 /var/lib/mysql 到宿主机 compose 文件所在的位置")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#         - ~/configs:/etc/configs/:ro    # 映射容器宿主机的目录到容器中去, 权限只读")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#         - datavolume:/var/lib/mysql     # datavolume 为 volumes 顶级键定义的目录, 在此处直接调用")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# LONG 语法格式示例:(v3.2 新增的语法格式)")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v('#     version: "3.2"')]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#     services:")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#         web:")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#             image: nginx:alpine")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#             ports:")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v('#                 - "80:80"')]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#             volumes:")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#                 - type: volume                  # mount 的类型, 必须是 bind、volume 或 tmpfs")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#                     source: mydata              # 宿主机目录")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#                     target: /data               # 容器目录")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#                     volume:                     # 配置额外的选项, 其 key 必须和 type 的值相同")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#                         nocopy: true                # volume 额外的选项, 在创建卷时禁用从容器复制数据")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#                 - type: bind                    # volume 模式只指定容器路径即可, 宿主机路径随机生成; bind 需要指定容器和数据机的映射路径")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#                     source: ./static")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#                     target: /opt/app/static")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#                     read_only: true             # 设置文件系统为只读文件系统")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#     volumes:")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#         mydata:                                 # 定义在 volume, 可在所有服务中调用")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("restart")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n      on"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("failure "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 定义容器重启策略(在使用 swarm 部署时将忽略该选项, 在 swarm 使用 restart_policy 代替 restart)")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# no                    # 禁止自动重启容器(默认)")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# always                # 无论如何容器都会重启")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# on-failure            # 当出现 on-failure 报错时, 容器重新启动")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 其他选项：")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#     domainname, hostname, ipc, mac_address, privileged, read_only, shm_size, stdin_open, tty, user, working_dir")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#     上面这些选项都只接受单个值和 docker run 的对应参数类似")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 对于值为时间的可接受的值：")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#     2.5s")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#     10s")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#     1m30s")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#     2h32m")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#     5h34m56s")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#     时间单位: us, ms, s, m， h")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 对于值为大小的可接受的值：")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#     2b")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#     1024kb")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#     2048k")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#     300m")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#     1gb")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#     单位: b, k, m, g 或者 kb, mb, gb")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("networks")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 定义 networks 信息")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("driver")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" bridge "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 指定网络模式, 大多数情况下, 它 bridge 于单个主机和 overlay Swarm 上")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# bridge                # Docker 默认使用 bridge 连接单个主机上的网络")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# overlay               # overlay 驱动程序创建一个跨多个节点命名的网络")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# host                  # 共享主机网络名称空间(等同于 docker run --net=host)")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# none                  # 等同于 docker run --net=none")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("driver_opts")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# v3.2以上版本, 传递给驱动程序的参数, 这些参数取决于驱动程序")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("my_opt")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"value"')]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("attachable")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token boolean important"}},[s._v("true")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# driver 为 overlay 时使用, 如果设置为 true 则除了服务之外，独立容器也可以附加到该网络; 如果独立容器连接到该网络，则它可以与其他 Docker 守护进程连接到的该网络的服务和独立容器进行通信")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("ipam")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 自定义 IPAM 配置. 这是一个具有多个属性的对象, 每个属性都是可选的")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("driver")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" bridge "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# IPAM 驱动程序, bridge 或者 default")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("config")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 配置项")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("subnet")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" 172.28.0.0/16 "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# CIDR格式的子网，表示该网络的网段")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("external")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 外部网络, 如果设置为 true 则 docker-compose up 不会尝试创建它, 如果它不存在则引发错误")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("name")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" my_other_network\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("name")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" my_network "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# v3.5 以上版本, 为此网络设置名称")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br"),n("span",{staticClass:"line-number"},[s._v("43")]),n("br"),n("span",{staticClass:"line-number"},[s._v("44")]),n("br"),n("span",{staticClass:"line-number"},[s._v("45")]),n("br"),n("span",{staticClass:"line-number"},[s._v("46")]),n("br"),n("span",{staticClass:"line-number"},[s._v("47")]),n("br"),n("span",{staticClass:"line-number"},[s._v("48")]),n("br"),n("span",{staticClass:"line-number"},[s._v("49")]),n("br"),n("span",{staticClass:"line-number"},[s._v("50")]),n("br"),n("span",{staticClass:"line-number"},[s._v("51")]),n("br"),n("span",{staticClass:"line-number"},[s._v("52")]),n("br"),n("span",{staticClass:"line-number"},[s._v("53")]),n("br"),n("span",{staticClass:"line-number"},[s._v("54")]),n("br"),n("span",{staticClass:"line-number"},[s._v("55")]),n("br"),n("span",{staticClass:"line-number"},[s._v("56")]),n("br"),n("span",{staticClass:"line-number"},[s._v("57")]),n("br"),n("span",{staticClass:"line-number"},[s._v("58")]),n("br"),n("span",{staticClass:"line-number"},[s._v("59")]),n("br"),n("span",{staticClass:"line-number"},[s._v("60")]),n("br"),n("span",{staticClass:"line-number"},[s._v("61")]),n("br"),n("span",{staticClass:"line-number"},[s._v("62")]),n("br"),n("span",{staticClass:"line-number"},[s._v("63")]),n("br"),n("span",{staticClass:"line-number"},[s._v("64")]),n("br"),n("span",{staticClass:"line-number"},[s._v("65")]),n("br"),n("span",{staticClass:"line-number"},[s._v("66")]),n("br"),n("span",{staticClass:"line-number"},[s._v("67")]),n("br"),n("span",{staticClass:"line-number"},[s._v("68")]),n("br"),n("span",{staticClass:"line-number"},[s._v("69")]),n("br"),n("span",{staticClass:"line-number"},[s._v("70")]),n("br"),n("span",{staticClass:"line-number"},[s._v("71")]),n("br"),n("span",{staticClass:"line-number"},[s._v("72")]),n("br"),n("span",{staticClass:"line-number"},[s._v("73")]),n("br"),n("span",{staticClass:"line-number"},[s._v("74")]),n("br"),n("span",{staticClass:"line-number"},[s._v("75")]),n("br"),n("span",{staticClass:"line-number"},[s._v("76")]),n("br"),n("span",{staticClass:"line-number"},[s._v("77")]),n("br"),n("span",{staticClass:"line-number"},[s._v("78")]),n("br"),n("span",{staticClass:"line-number"},[s._v("79")]),n("br"),n("span",{staticClass:"line-number"},[s._v("80")]),n("br"),n("span",{staticClass:"line-number"},[s._v("81")]),n("br"),n("span",{staticClass:"line-number"},[s._v("82")]),n("br"),n("span",{staticClass:"line-number"},[s._v("83")]),n("br"),n("span",{staticClass:"line-number"},[s._v("84")]),n("br"),n("span",{staticClass:"line-number"},[s._v("85")]),n("br"),n("span",{staticClass:"line-number"},[s._v("86")]),n("br"),n("span",{staticClass:"line-number"},[s._v("87")]),n("br"),n("span",{staticClass:"line-number"},[s._v("88")]),n("br"),n("span",{staticClass:"line-number"},[s._v("89")]),n("br"),n("span",{staticClass:"line-number"},[s._v("90")]),n("br"),n("span",{staticClass:"line-number"},[s._v("91")]),n("br"),n("span",{staticClass:"line-number"},[s._v("92")]),n("br"),n("span",{staticClass:"line-number"},[s._v("93")]),n("br"),n("span",{staticClass:"line-number"},[s._v("94")]),n("br"),n("span",{staticClass:"line-number"},[s._v("95")]),n("br"),n("span",{staticClass:"line-number"},[s._v("96")]),n("br"),n("span",{staticClass:"line-number"},[s._v("97")]),n("br"),n("span",{staticClass:"line-number"},[s._v("98")]),n("br"),n("span",{staticClass:"line-number"},[s._v("99")]),n("br"),n("span",{staticClass:"line-number"},[s._v("100")]),n("br"),n("span",{staticClass:"line-number"},[s._v("101")]),n("br"),n("span",{staticClass:"line-number"},[s._v("102")]),n("br"),n("span",{staticClass:"line-number"},[s._v("103")]),n("br"),n("span",{staticClass:"line-number"},[s._v("104")]),n("br"),n("span",{staticClass:"line-number"},[s._v("105")]),n("br"),n("span",{staticClass:"line-number"},[s._v("106")]),n("br"),n("span",{staticClass:"line-number"},[s._v("107")]),n("br"),n("span",{staticClass:"line-number"},[s._v("108")]),n("br"),n("span",{staticClass:"line-number"},[s._v("109")]),n("br"),n("span",{staticClass:"line-number"},[s._v("110")]),n("br"),n("span",{staticClass:"line-number"},[s._v("111")]),n("br"),n("span",{staticClass:"line-number"},[s._v("112")]),n("br"),n("span",{staticClass:"line-number"},[s._v("113")]),n("br"),n("span",{staticClass:"line-number"},[s._v("114")]),n("br"),n("span",{staticClass:"line-number"},[s._v("115")]),n("br"),n("span",{staticClass:"line-number"},[s._v("116")]),n("br"),n("span",{staticClass:"line-number"},[s._v("117")]),n("br"),n("span",{staticClass:"line-number"},[s._v("118")]),n("br"),n("span",{staticClass:"line-number"},[s._v("119")]),n("br"),n("span",{staticClass:"line-number"},[s._v("120")]),n("br"),n("span",{staticClass:"line-number"},[s._v("121")]),n("br"),n("span",{staticClass:"line-number"},[s._v("122")]),n("br"),n("span",{staticClass:"line-number"},[s._v("123")]),n("br"),n("span",{staticClass:"line-number"},[s._v("124")]),n("br"),n("span",{staticClass:"line-number"},[s._v("125")]),n("br"),n("span",{staticClass:"line-number"},[s._v("126")]),n("br"),n("span",{staticClass:"line-number"},[s._v("127")]),n("br"),n("span",{staticClass:"line-number"},[s._v("128")]),n("br"),n("span",{staticClass:"line-number"},[s._v("129")]),n("br"),n("span",{staticClass:"line-number"},[s._v("130")]),n("br"),n("span",{staticClass:"line-number"},[s._v("131")]),n("br"),n("span",{staticClass:"line-number"},[s._v("132")]),n("br"),n("span",{staticClass:"line-number"},[s._v("133")]),n("br"),n("span",{staticClass:"line-number"},[s._v("134")]),n("br"),n("span",{staticClass:"line-number"},[s._v("135")]),n("br"),n("span",{staticClass:"line-number"},[s._v("136")]),n("br"),n("span",{staticClass:"line-number"},[s._v("137")]),n("br"),n("span",{staticClass:"line-number"},[s._v("138")]),n("br"),n("span",{staticClass:"line-number"},[s._v("139")]),n("br"),n("span",{staticClass:"line-number"},[s._v("140")]),n("br"),n("span",{staticClass:"line-number"},[s._v("141")]),n("br"),n("span",{staticClass:"line-number"},[s._v("142")]),n("br"),n("span",{staticClass:"line-number"},[s._v("143")]),n("br"),n("span",{staticClass:"line-number"},[s._v("144")]),n("br"),n("span",{staticClass:"line-number"},[s._v("145")]),n("br"),n("span",{staticClass:"line-number"},[s._v("146")]),n("br"),n("span",{staticClass:"line-number"},[s._v("147")]),n("br"),n("span",{staticClass:"line-number"},[s._v("148")]),n("br"),n("span",{staticClass:"line-number"},[s._v("149")]),n("br"),n("span",{staticClass:"line-number"},[s._v("150")]),n("br"),n("span",{staticClass:"line-number"},[s._v("151")]),n("br"),n("span",{staticClass:"line-number"},[s._v("152")]),n("br"),n("span",{staticClass:"line-number"},[s._v("153")]),n("br"),n("span",{staticClass:"line-number"},[s._v("154")]),n("br"),n("span",{staticClass:"line-number"},[s._v("155")]),n("br"),n("span",{staticClass:"line-number"},[s._v("156")]),n("br"),n("span",{staticClass:"line-number"},[s._v("157")]),n("br"),n("span",{staticClass:"line-number"},[s._v("158")]),n("br"),n("span",{staticClass:"line-number"},[s._v("159")]),n("br"),n("span",{staticClass:"line-number"},[s._v("160")]),n("br"),n("span",{staticClass:"line-number"},[s._v("161")]),n("br"),n("span",{staticClass:"line-number"},[s._v("162")]),n("br"),n("span",{staticClass:"line-number"},[s._v("163")]),n("br"),n("span",{staticClass:"line-number"},[s._v("164")]),n("br"),n("span",{staticClass:"line-number"},[s._v("165")]),n("br"),n("span",{staticClass:"line-number"},[s._v("166")]),n("br"),n("span",{staticClass:"line-number"},[s._v("167")]),n("br"),n("span",{staticClass:"line-number"},[s._v("168")]),n("br"),n("span",{staticClass:"line-number"},[s._v("169")]),n("br"),n("span",{staticClass:"line-number"},[s._v("170")]),n("br"),n("span",{staticClass:"line-number"},[s._v("171")]),n("br"),n("span",{staticClass:"line-number"},[s._v("172")]),n("br"),n("span",{staticClass:"line-number"},[s._v("173")]),n("br"),n("span",{staticClass:"line-number"},[s._v("174")]),n("br"),n("span",{staticClass:"line-number"},[s._v("175")]),n("br"),n("span",{staticClass:"line-number"},[s._v("176")]),n("br"),n("span",{staticClass:"line-number"},[s._v("177")]),n("br"),n("span",{staticClass:"line-number"},[s._v("178")]),n("br"),n("span",{staticClass:"line-number"},[s._v("179")]),n("br"),n("span",{staticClass:"line-number"},[s._v("180")]),n("br"),n("span",{staticClass:"line-number"},[s._v("181")]),n("br"),n("span",{staticClass:"line-number"},[s._v("182")]),n("br"),n("span",{staticClass:"line-number"},[s._v("183")]),n("br"),n("span",{staticClass:"line-number"},[s._v("184")]),n("br"),n("span",{staticClass:"line-number"},[s._v("185")]),n("br"),n("span",{staticClass:"line-number"},[s._v("186")]),n("br"),n("span",{staticClass:"line-number"},[s._v("187")]),n("br"),n("span",{staticClass:"line-number"},[s._v("188")]),n("br"),n("span",{staticClass:"line-number"},[s._v("189")]),n("br"),n("span",{staticClass:"line-number"},[s._v("190")]),n("br"),n("span",{staticClass:"line-number"},[s._v("191")]),n("br"),n("span",{staticClass:"line-number"},[s._v("192")]),n("br"),n("span",{staticClass:"line-number"},[s._v("193")]),n("br"),n("span",{staticClass:"line-number"},[s._v("194")]),n("br"),n("span",{staticClass:"line-number"},[s._v("195")]),n("br"),n("span",{staticClass:"line-number"},[s._v("196")]),n("br"),n("span",{staticClass:"line-number"},[s._v("197")]),n("br"),n("span",{staticClass:"line-number"},[s._v("198")]),n("br"),n("span",{staticClass:"line-number"},[s._v("199")]),n("br"),n("span",{staticClass:"line-number"},[s._v("200")]),n("br"),n("span",{staticClass:"line-number"},[s._v("201")]),n("br"),n("span",{staticClass:"line-number"},[s._v("202")]),n("br"),n("span",{staticClass:"line-number"},[s._v("203")]),n("br"),n("span",{staticClass:"line-number"},[s._v("204")]),n("br"),n("span",{staticClass:"line-number"},[s._v("205")]),n("br"),n("span",{staticClass:"line-number"},[s._v("206")]),n("br"),n("span",{staticClass:"line-number"},[s._v("207")]),n("br"),n("span",{staticClass:"line-number"},[s._v("208")]),n("br"),n("span",{staticClass:"line-number"},[s._v("209")]),n("br"),n("span",{staticClass:"line-number"},[s._v("210")]),n("br"),n("span",{staticClass:"line-number"},[s._v("211")]),n("br"),n("span",{staticClass:"line-number"},[s._v("212")]),n("br"),n("span",{staticClass:"line-number"},[s._v("213")]),n("br"),n("span",{staticClass:"line-number"},[s._v("214")]),n("br"),n("span",{staticClass:"line-number"},[s._v("215")]),n("br"),n("span",{staticClass:"line-number"},[s._v("216")]),n("br"),n("span",{staticClass:"line-number"},[s._v("217")]),n("br"),n("span",{staticClass:"line-number"},[s._v("218")]),n("br"),n("span",{staticClass:"line-number"},[s._v("219")]),n("br"),n("span",{staticClass:"line-number"},[s._v("220")]),n("br"),n("span",{staticClass:"line-number"},[s._v("221")]),n("br"),n("span",{staticClass:"line-number"},[s._v("222")]),n("br"),n("span",{staticClass:"line-number"},[s._v("223")]),n("br"),n("span",{staticClass:"line-number"},[s._v("224")]),n("br"),n("span",{staticClass:"line-number"},[s._v("225")]),n("br"),n("span",{staticClass:"line-number"},[s._v("226")]),n("br"),n("span",{staticClass:"line-number"},[s._v("227")]),n("br"),n("span",{staticClass:"line-number"},[s._v("228")]),n("br"),n("span",{staticClass:"line-number"},[s._v("229")]),n("br"),n("span",{staticClass:"line-number"},[s._v("230")]),n("br"),n("span",{staticClass:"line-number"},[s._v("231")]),n("br"),n("span",{staticClass:"line-number"},[s._v("232")]),n("br"),n("span",{staticClass:"line-number"},[s._v("233")]),n("br"),n("span",{staticClass:"line-number"},[s._v("234")]),n("br"),n("span",{staticClass:"line-number"},[s._v("235")]),n("br"),n("span",{staticClass:"line-number"},[s._v("236")]),n("br"),n("span",{staticClass:"line-number"},[s._v("237")]),n("br"),n("span",{staticClass:"line-number"},[s._v("238")]),n("br"),n("span",{staticClass:"line-number"},[s._v("239")]),n("br"),n("span",{staticClass:"line-number"},[s._v("240")]),n("br"),n("span",{staticClass:"line-number"},[s._v("241")]),n("br"),n("span",{staticClass:"line-number"},[s._v("242")]),n("br"),n("span",{staticClass:"line-number"},[s._v("243")]),n("br"),n("span",{staticClass:"line-number"},[s._v("244")]),n("br"),n("span",{staticClass:"line-number"},[s._v("245")]),n("br"),n("span",{staticClass:"line-number"},[s._v("246")]),n("br"),n("span",{staticClass:"line-number"},[s._v("247")]),n("br"),n("span",{staticClass:"line-number"},[s._v("248")]),n("br"),n("span",{staticClass:"line-number"},[s._v("249")]),n("br"),n("span",{staticClass:"line-number"},[s._v("250")]),n("br"),n("span",{staticClass:"line-number"},[s._v("251")]),n("br"),n("span",{staticClass:"line-number"},[s._v("252")]),n("br"),n("span",{staticClass:"line-number"},[s._v("253")]),n("br"),n("span",{staticClass:"line-number"},[s._v("254")]),n("br"),n("span",{staticClass:"line-number"},[s._v("255")]),n("br"),n("span",{staticClass:"line-number"},[s._v("256")]),n("br"),n("span",{staticClass:"line-number"},[s._v("257")]),n("br"),n("span",{staticClass:"line-number"},[s._v("258")]),n("br"),n("span",{staticClass:"line-number"},[s._v("259")]),n("br"),n("span",{staticClass:"line-number"},[s._v("260")]),n("br"),n("span",{staticClass:"line-number"},[s._v("261")]),n("br"),n("span",{staticClass:"line-number"},[s._v("262")]),n("br")])])])}),[],!1,null,null,null);t.default=e.exports}}]);