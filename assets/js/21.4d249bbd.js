(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{511:function(t,r,a){"use strict";a.r(r);var e=a(6),_=Object(e.a)({},(function(){var t=this,r=t.$createElement,a=t._self._c||r;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#介绍"}},[t._v("#")]),t._v(" 介绍")]),t._v(" "),a("p",[a("strong",[t._v("意图")]),t._v("：定义一个创建对象的接口，让其子类自己决定实例化哪一个工厂类，工厂模式使其创建过程延迟到子类进行。")]),t._v(" "),a("p",[a("strong",[t._v("主要解决问题")]),t._v("：主要解决接口选择的问题。")]),t._v(" "),a("p",[a("strong",[t._v("实现方式")]),t._v("：让其子类实现工厂接口，返回的也是一个抽象的产品。")]),t._v(" "),a("p",[a("strong",[t._v("关键代码")]),t._v("：创建过程在其子类执行。")]),t._v(" "),a("p",[a("strong",[t._v("优点")]),t._v("：")]),t._v(" "),a("ol",[a("li",[t._v("一个调用者想创建一个对象，只要知道其名称就可以了。")]),t._v(" "),a("li",[t._v("扩展性高，如果想增加一个产品，只要扩展一个工厂类就可以。")]),t._v(" "),a("li",[t._v("屏蔽产品的具体实现，调用者只关心产品的接口。")])]),t._v(" "),a("p",[a("strong",[t._v("缺点")]),t._v("：")]),t._v(" "),a("ol",[a("li",[t._v("每次增加一个产品时，都需要增加一个具体类和对象实现工厂，使得系统中类的个数成倍增加，在一定程度上增加了系统的复杂度，同时也增加了系统具体类的依赖。")])]),t._v(" "),a("p",[a("strong",[t._v("使用场景")]),t._v("：")]),t._v(" "),a("ol",[a("li",[t._v("日志记录器：记录可能记录到本地硬盘、系统事件、远程服务器等，用户可以选择记录日志到什么地方。")]),t._v(" "),a("li",[t._v("数据库访问，当用户不知道最后系统采用哪一类数据库，以及数据库可能有变化时。")])]),t._v(" "),a("h2",{attrs:{id:"简单工厂"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#简单工厂"}},[t._v("#")]),t._v(" 简单工厂")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/syfxlin/code/blob/master/design-pattern-java/src/main/java/me/ixk/design_pattern/factory/SimpleFactory.java",target:"_blank",rel:"noopener noreferrer"}},[t._v("代码"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("简单工厂简单易用，通过定义一个方法，然后在方法内通过 if 过滤创建不同的对象。缺点也很明显，违背了开闭原则，扩展困难，一般只用于要创建对象相对固定的情况。")]),t._v(" "),a("h2",{attrs:{id:"工厂方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#工厂方法"}},[t._v("#")]),t._v(" 工厂方法")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/syfxlin/code/blob/master/design-pattern-java/src/main/java/me/ixk/design_pattern/factory_method",target:"_blank",rel:"noopener noreferrer"}},[t._v("代码"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("工厂方法把简单工厂中的 if 分支去掉了，采用多态来实现不同的工厂。但是这样会造成工厂众多，创建起来也会变得复杂，此时我们可以给工厂添加一个简单工厂，这样就能兼顾二者的优点。")]),t._v(" "),a("h2",{attrs:{id:"抽象工厂"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#抽象工厂"}},[t._v("#")]),t._v(" 抽象工厂")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/syfxlin/code/blob/master/design-pattern-java/src/main/java/me/ixk/design_pattern/abstract_factory",target:"_blank",rel:"noopener noreferrer"}},[t._v("代码"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("抽象工厂相对特殊，通常情况下我们定义一个工厂，那么这个工厂只生产一种对象，当要生产的对象多了，工厂也会随之增加，众多的类会使维护起来变得困难。抽象工厂就是为了解决这种问题才诞生的，在抽象工厂中，工厂不只生产一种对象，而是生产多个与之相关的对象，使需要维护的工厂变少。")])])}),[],!1,null,null,null);r.default=_.exports}}]);