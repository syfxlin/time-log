(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{522:function(t,r,e){"use strict";e.r(r);var s=e(6),n=Object(s.a)({},(function(){var t=this,r=t.$createElement,e=t._self._c||r;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"介绍"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#介绍"}},[t._v("#")]),t._v(" 介绍")]),t._v(" "),e("p",[e("strong",[t._v("意图")]),t._v("：定义一系列的算法,把它们一个个封装起来, 并且使它们可相互替换。")]),t._v(" "),e("p",[e("strong",[t._v("主要解决问题")]),t._v("：在有多种算法相似的情况下，使用 if...else 所带来的复杂和难以维护。")]),t._v(" "),e("p",[e("strong",[t._v("实现方式")]),t._v("：将这些算法封装成一个一个的类，任意地替换。")]),t._v(" "),e("p",[e("strong",[t._v("关键代码")]),t._v("：实现同一个接口。")]),t._v(" "),e("p",[e("strong",[t._v("优点")]),t._v("：1、算法可以自由切换。2、避免使用多重条件判断。3、扩展性良好。")]),t._v(" "),e("p",[e("strong",[t._v("缺点")]),t._v("：1、策略类会增多。2、所有策略类都需要对外暴露。")]),t._v(" "),e("p",[e("strong",[t._v("使用场景")]),t._v("：1、如果在一个系统里面有许多类，它们之间的区别仅在于它们的行为，那么使用策略模式可以动态地让一个对象在许多行为中选择一种行为。2、一个系统需要动态地在几种算法中选择一种。3、如果一个对象有很多的行为，如果不用恰当的模式，这些行为就只好使用多重的条件选择语句来实现。")]),t._v(" "),e("h2",{attrs:{id:"代码"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#代码"}},[t._v("#")]),t._v(" 代码")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://github.com/syfxlin/code/blob/master/design-pattern-java/src/main/java/me/ixk/design_pattern/strategy",target:"_blank",rel:"noopener noreferrer"}},[t._v("代码"),e("OutboundLink")],1)])])}),[],!1,null,null,null);r.default=n.exports}}]);