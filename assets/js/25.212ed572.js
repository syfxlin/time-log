(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{515:function(t,r,e){"use strict";e.r(r);var a=e(6),n=Object(a.a)({},(function(){var t=this,r=t.$createElement,e=t._self._c||r;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"介绍"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#介绍"}},[t._v("#")]),t._v(" 介绍")]),t._v(" "),e("p",[e("strong",[t._v("意图")]),t._v("：用一个中介对象来封装一系列的对象交互，中介者使各对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。")]),t._v(" "),e("p",[e("strong",[t._v("主要解决问题")]),t._v("：对象与对象之间存在大量的关联关系，这样势必会导致系统的结构变得很复杂，同时若一个对象发生改变，我们也需要跟踪与之相关联的对象，同时做出相应的处理。")]),t._v(" "),e("p",[e("strong",[t._v("实现方式")]),t._v("：将上述网状结构分离为星型结构。")]),t._v(" "),e("p",[e("strong",[t._v("关键代码")]),t._v("：对象 Colleague 之间的通信封装到一个类中单独处理。")]),t._v(" "),e("p",[e("strong",[t._v("优点")]),t._v("：1、降低了类的复杂度，将一对多转化成了一对一。 2、各个类之间的解耦。 3、符合迪米特原则。")]),t._v(" "),e("p",[e("strong",[t._v("缺点")]),t._v("：中介者会庞大，变得复杂难以维护。")]),t._v(" "),e("p",[e("strong",[t._v("使用场景")]),t._v("：1、系统中对象之间存在比较复杂的引用关系，导致它们之间的依赖关系结构混乱而且难以复用该对象。 2、想通过一个中间类来封装多个类中的行为，而又不想生成太多的子类。")]),t._v(" "),e("h2",{attrs:{id:"代码"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#代码"}},[t._v("#")]),t._v(" 代码")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://github.com/syfxlin/code/blob/master/design-pattern-java/src/main/java/me/ixk/design_pattern/mediator",target:"_blank",rel:"noopener noreferrer"}},[t._v("代码"),e("OutboundLink")],1)])])}),[],!1,null,null,null);r.default=n.exports}}]);