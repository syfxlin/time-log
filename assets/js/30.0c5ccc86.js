(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{520:function(t,r,s){"use strict";s.r(r);var n=s(6),e=Object(n.a)({},(function(){var t=this,r=t.$createElement,s=t._self._c||r;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"介绍"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#介绍"}},[t._v("#")]),t._v(" 介绍")]),t._v(" "),s("p",[s("strong",[t._v("意图")]),t._v("：在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。")]),t._v(" "),s("p",[s("strong",[t._v("主要解决问题")]),t._v("：所谓备忘录模式就是在不破坏封装的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态，这样可以在以后将对象恢复到原先保存的状态。")]),t._v(" "),s("p",[s("strong",[t._v("实现方式")]),t._v("：通过一个备忘录类专门存储对象状态。")]),t._v(" "),s("p",[s("strong",[t._v("关键代码")]),t._v("：客户不与备忘录类耦合，与备忘录管理类耦合。")]),t._v(" "),s("p",[s("strong",[t._v("优点")]),t._v("：1、给用户提供了一种可以恢复状态的机制，可以使用户能够比较方便地回到某个历史的状态。 2、实现了信息的封装，使得用户不需要关心状态的保存细节。")]),t._v(" "),s("p",[s("strong",[t._v("缺点")]),t._v("：消耗资源。如果类的成员变量过多，势必会占用比较大的资源，而且每一次保存都会消耗一定的内存。")]),t._v(" "),s("p",[s("strong",[t._v("使用场景")]),t._v("：1、需要保存/恢复数据的相关状态场景。 2、提供一个可回滚的操作。")]),t._v(" "),s("h2",{attrs:{id:"代码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#代码"}},[t._v("#")]),t._v(" 代码")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://github.com/syfxlin/code/blob/master/design-pattern-java/src/main/java/me/ixk/design_pattern/snapshot",target:"_blank",rel:"noopener noreferrer"}},[t._v("代码"),s("OutboundLink")],1)])])}),[],!1,null,null,null);r.default=e.exports}}]);