(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{516:function(t,r,e){"use strict";e.r(r);var s=e(6),n=Object(s.a)({},(function(){var t=this,r=t.$createElement,e=t._self._c||r;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"介绍"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#介绍"}},[t._v("#")]),t._v(" 介绍")]),t._v(" "),e("p",[e("strong",[t._v("意图")]),t._v("：定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。")]),t._v(" "),e("p",[e("strong",[t._v("主要解决问题")]),t._v("：一个对象状态改变给其他对象通知的问题，而且要考虑到易用和低耦合，保证高度的协作。")]),t._v(" "),e("p",[e("strong",[t._v("实现方式")]),t._v("：使用面向对象技术，可以将这种依赖关系弱化。")]),t._v(" "),e("p",[e("strong",[t._v("关键代码")]),t._v("：在抽象类里有一个 ArrayList 存放观察者们。")]),t._v(" "),e("p",[e("strong",[t._v("优点")]),t._v("：1、观察者和被观察者是抽象耦合的。2、建立一套触发机制。")]),t._v(" "),e("p",[e("strong",[t._v("缺点")]),t._v("：1、如果一个被观察者对象有很多的直接和间接的观察者的话，将所有的观察者都通知到会花费很多时间。2、观察者模式没有相应的机制让观察者知道所观察的目标对象是怎么发生变化的，而仅仅只是知道观察目标发生了变化。")]),t._v(" "),e("p",[e("strong",[t._v("使用场景")]),t._v("：1、事件监听。2、MVVM 模式")]),t._v(" "),e("h2",{attrs:{id:"代码"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#代码"}},[t._v("#")]),t._v(" 代码")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://github.com/syfxlin/code/blob/master/design-pattern-java/src/main/java/me/ixk/design_pattern/observer",target:"_blank",rel:"noopener noreferrer"}},[t._v("代码"),e("OutboundLink")],1)])])}),[],!1,null,null,null);r.default=n.exports}}]);