(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{508:function(t,r,e){"use strict";e.r(r);var n=e(6),s=Object(n.a)({},(function(){var t=this,r=t.$createElement,e=t._self._c||r;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"介绍"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#介绍"}},[t._v("#")]),t._v(" 介绍")]),t._v(" "),e("p",[e("strong",[t._v("意图")]),t._v('：将对象组合成树形结构以表示"部分-整体"的层次结构。组合模式使得用户对单个对象和组合对象的使用具有一致性。')]),t._v(" "),e("p",[e("strong",[t._v("主要解决问题")]),t._v("：它在我们树型结构的问题中，模糊了简单元素和复杂元素的概念，客户程序可以像处理简单元素一样来处理复杂元素，从而使得客户程序与复杂元素的内部结构解耦。")]),t._v(" "),e("p",[e("strong",[t._v("实现方式")]),t._v("：树枝和叶子实现统一接口，树枝内部组合该接口。")]),t._v(" "),e("p",[e("strong",[t._v("关键代码")]),t._v("：树枝内部组合该接口，并且含有内部属性 List，里面放 Component。")]),t._v(" "),e("p",[e("strong",[t._v("优点")]),t._v("：")]),t._v(" "),e("ol",[e("li",[t._v("高层模块调用简单。")]),t._v(" "),e("li",[t._v("节点自由增加。")])]),t._v(" "),e("p",[e("strong",[t._v("缺点")]),t._v("：在使用组合模式时，其叶子和树枝的声明都是实现类，而不是接口，违反了依赖倒置原则。")]),t._v(" "),e("p",[e("strong",[t._v("使用场景")]),t._v("：部分、整体场景，如树形菜单，文件、文件夹的管理。")]),t._v(" "),e("h2",{attrs:{id:"代码"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#代码"}},[t._v("#")]),t._v(" 代码")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://github.com/syfxlin/code/blob/master/design-pattern-java/src/main/java/me/ixk/design_pattern/composite",target:"_blank",rel:"noopener noreferrer"}},[t._v("代码"),e("OutboundLink")],1)])])}),[],!1,null,null,null);r.default=s.exports}}]);