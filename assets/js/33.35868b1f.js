(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{523:function(t,r,e){"use strict";e.r(r);var n=e(6),s=Object(n.a)({},(function(){var t=this,r=t.$createElement,e=t._self._c||r;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"介绍"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#介绍"}},[t._v("#")]),t._v(" 介绍")]),t._v(" "),e("p",[e("strong",[t._v("意图")]),t._v("：定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。模板方法使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。")]),t._v(" "),e("p",[e("strong",[t._v("主要解决问题")]),t._v("：一些方法通用，却在每一个子类都重新写了这一方法。")]),t._v(" "),e("p",[e("strong",[t._v("实现方式")]),t._v("：将这些通用算法抽象出来。")]),t._v(" "),e("p",[e("strong",[t._v("关键代码")]),t._v("：在抽象类实现，其他步骤在子类实现。")]),t._v(" "),e("p",[e("strong",[t._v("优点")]),t._v("： 1、封装不变部分，扩展可变部分。 2、提取公共代码，便于维护。 3、行为由父类控制，子类实现。")]),t._v(" "),e("p",[e("strong",[t._v("缺点")]),t._v("：每一个不同的实现都需要一个子类来实现，导致类的个数增加，使得系统更加庞大。")]),t._v(" "),e("p",[e("strong",[t._v("使用场景")]),t._v("： 1、有多个子类共有的方法，且逻辑相同。 2、重要的、复杂的方法，可以考虑作为模板方法。")]),t._v(" "),e("h2",{attrs:{id:"代码"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#代码"}},[t._v("#")]),t._v(" 代码")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://github.com/syfxlin/code/blob/master/design-pattern-java/src/main/java/me/ixk/design_pattern/template",target:"_blank",rel:"noopener noreferrer"}},[t._v("代码"),e("OutboundLink")],1)])])}),[],!1,null,null,null);r.default=s.exports}}]);