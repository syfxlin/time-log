(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{513:function(t,r,e){"use strict";e.r(r);var n=e(6),s=Object(n.a)({},(function(){var t=this,r=t.$createElement,e=t._self._c||r;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"介绍"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#介绍"}},[t._v("#")]),t._v(" 介绍")]),t._v(" "),e("p",[e("strong",[t._v("意图")]),t._v("：给定一个语言，定义它的文法表示，并定义一个解释器，这个解释器使用该标识来解释语言中的句子。")]),t._v(" "),e("p",[e("strong",[t._v("主要解决问题")]),t._v("：给定一个语言，定义它的文法表示，并定义一个解释器，这个解释器使用该标识来解释语言中的句子。")]),t._v(" "),e("p",[e("strong",[t._v("实现方式")]),t._v("：构建语法树，定义终结符与非终结符。")]),t._v(" "),e("p",[e("strong",[t._v("关键代码")]),t._v("：构建环境类，包含解释器之外的一些全局信息，一般是 HashMap。")]),t._v(" "),e("p",[e("strong",[t._v("优点")]),t._v("：1、可扩展性比较好，灵活。 2、增加了新的解释表达式的方式。 3、易于实现简单文法。")]),t._v(" "),e("p",[e("strong",[t._v("缺点")]),t._v("：1、可利用场景比较少。 2、对于复杂的文法比较难维护。 3、解释器模式会引起类膨胀。 4、解释器模式采用递归调用方法。")]),t._v(" "),e("p",[e("strong",[t._v("使用场景")]),t._v("：1、可以将一个需要解释执行的语言中的句子表示为一个抽象语法树。 2、一些重复出现的问题可以用一种简单的语言来进行表达。")]),t._v(" "),e("h2",{attrs:{id:"代码"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#代码"}},[t._v("#")]),t._v(" 代码")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://github.com/syfxlin/code/blob/master/design-pattern-java/src/main/java/me/ixk/design_pattern/interpreter",target:"_blank",rel:"noopener noreferrer"}},[t._v("代码"),e("OutboundLink")],1)])])}),[],!1,null,null,null);r.default=s.exports}}]);