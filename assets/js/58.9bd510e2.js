(window.webpackJsonp=window.webpackJsonp||[]).push([[58],{548:function(a,s,t){"use strict";t.r(s);var n=t(6),e=Object(n.a)({},(function(){var a=this,s=a.$createElement,t=a._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h2",{attrs:{id:"原始数据类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#原始数据类型"}},[a._v("#")]),a._v(" 原始数据类型")]),a._v(" "),t("p",[a._v("虽然 Java 号称一切皆对象，但是在 Java 中原始数据类型并不是对象。由于只是基本的数据类型，所以只提供了基本的操作，如加减等。")]),a._v(" "),t("p",[a._v("原始数据类型的变量，显然要使用并发相关手段，才能保证线程安全。如使用锁或者替换成 "),t("code",[a._v("java.util.concurrent.atomic")]),a._v(" 包中对应的 "),t("code",[a._v("Atomic")]),a._v(" 并发包装类。部分比较宽的数据类型，比如 float、double，甚至不能保证更新操作的原子性，可能出现程序读取到只更新了一半数据位的数值。")]),a._v(" "),t("h2",{attrs:{id:"包装数据类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#包装数据类型"}},[a._v("#")]),a._v(" 包装数据类型")]),a._v(" "),t("p",[a._v("包装类型即对应原始数据类型的对象类，使用和原始数据类型类似，但提供了一些原始数据类型不具备的功能，如转换字符串类型，进制转换等。")]),a._v(" "),t("p",[a._v("包装类型和 String 一样都是不可变类型，这样就保证了线程安全。")]),a._v(" "),t("p",[a._v("包装类型都有值缓存，通过值缓存可以避免频繁的创建相同的对象，如 Boolean 的 TRUE 和 FALSE。不过需要注意的是直接 new 对象不会使用值缓存，应使用 valueOf。自动装箱使用的是 valueOf，所以也会使用到值缓存。不同类型有不同范围的值缓存，如 Boolean 是 [TRUE,FALSE]，Short 是 [-128,127]")]),a._v(" "),t("h2",{attrs:{id:"自动装箱、拆箱"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#自动装箱、拆箱"}},[a._v("#")]),a._v(" 自动装箱、拆箱")]),a._v(" "),t("p",[a._v("自动装拆箱实际上算是一种语法糖。Java 会在编译时自动进行一些转换，以保证不同写法在运行时等价（即字节码是一致的）。")]),a._v(" "),t("p",[a._v("那么 Java 编译器是如何操作的呢？我们就拿以下一段代码来看看吧：")]),a._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Main")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("main")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" args"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Integer")]),a._v(" num "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" unbox "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" num "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br")])]),t("p",[a._v("通过 jclasslib 工具查看 "),t("code",[a._v("main")]),a._v(" 方法的字节码如下")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v(" 0 iconst_1\n 1 invokestatic #7 <java/lang/Integer.valueOf>\n 4 astore_1\n 5 aload_1\n 6 invokevirtual #13 <java/lang/Integer.intValue>\n 9 iconst_1\n10 iadd\n11 istore_2\n12 return\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br")])]),t("p",[a._v("可以看到在 "),t("code",[a._v("Integer num = 1")]),a._v(" 这句语句时候，Java 实际上是执行了 "),t("code",[a._v("Integer num = Integer.valueOf(1)")]),a._v(" 这就是自动装箱。而在 "),t("code",[a._v("int unbox = num + 1")]),a._v(" 的时候，Java 实际上是执行了 "),t("code",[a._v("int unbox = num.intValue() + 1")]),a._v(" 这就是自动拆箱。")]),a._v(" "),t("p",[a._v("虽然自动拆箱和自动装箱的步骤并不复杂，也有值缓存，但是我们也应该避免不必要的拆箱和装箱，因为即使很小的差距在数量庞大的情况下，差距也会被放大。")])])}),[],!1,null,null,null);s.default=e.exports}}]);