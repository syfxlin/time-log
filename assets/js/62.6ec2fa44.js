(window.webpackJsonp=window.webpackJsonp||[]).push([[62],{552:function(t,r,v){"use strict";v.r(r);var a=v(6),o=Object(a.a)({},(function(){var t=this,r=t.$createElement,v=t._self._c||r;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h2",{attrs:{id:"synchronized"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#synchronized"}},[t._v("#")]),t._v(" synchronized")]),t._v(" "),v("p",[t._v("synchronized 是 Java 中的一个关键字，是 Java 本地代码实现的同步、重量级锁。synchronized 可以保证方法或者代码块在运行时，同一时刻只有一个方法可以进入到临界区，同时它还可以保证共享变量的内存可见性。")]),t._v(" "),v("h3",{attrs:{id:"可以被修饰的对象-锁对象"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#可以被修饰的对象-锁对象"}},[t._v("#")]),t._v(" 可以被修饰的对象（锁对象）")]),t._v(" "),v("ul",[v("li",[t._v("普通同步方法，锁是当前实例对象。")]),t._v(" "),v("li",[t._v("静态同步方法，锁是当前类的 Class 对象。")]),t._v(" "),v("li",[t._v("同步方法块，锁是括号里面的对象。")])]),t._v(" "),v("h3",{attrs:{id:"实现机制"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#实现机制"}},[t._v("#")]),t._v(" 实现机制")]),t._v(" "),v("p",[t._v("synchronized 的锁机制是用 Java 对象头和管程（Monitor，监视器）实现的。当线程访问同步块时首先需要获得锁并把相关信息存储在对象头中。")]),t._v(" "),v("p",[t._v("对象头包括两部分数据：Mark Word（标记字段）和 Klass Pointer（类型指针）。")]),t._v(" "),v("p",[t._v("Mark Word 被设计成一个非固定的数据结构以便在极小的空间内存存储尽量多的数据，它会根据对象的状态复用自己的存储空间。其中包含了哈希码（HashCode）、GC 分代年龄、锁状态标志、线程持有的锁、偏向线程 ID、偏向时间戳。")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/syfxlin/pic/2020/12/20201215092954.png",alt:"Mark Word 结构图示"}})]),t._v(" "),v("p",[t._v("Java 基于进入和退出 Monitor 对象来实现方法的同步和代码块同步。每个对象都有一个 Monitor 与之关联,当其被占用就会处于锁定的状态。\nMonitor 并不是一个对象，只是习惯了这样一个称呼，他被保存在对象头的 Mark Word 中。")]),t._v(" "),v("p",[t._v("进入和退出 Monitor 通过 "),v("code",[t._v("monitorenter")]),t._v(" 和 "),v("code",[t._v("monitorexit")]),t._v(" 指令实现。")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/syfxlin/pic/2020/12/20201215105545.png",alt:"monitorenter 和 monitorexit 指令图示"}})]),t._v(" "),v("h3",{attrs:{id:"锁优化"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#锁优化"}},[t._v("#")]),t._v(" 锁优化")]),t._v(" "),v("p",[v("strong",[t._v("自旋锁")]),t._v("：当线程获取不到锁的时候，该线程等待一段时间，不会被立即挂起，看持有锁的线程是否会很快释放锁（循环方式）。线程的频繁挂起、唤醒负担较重，可以认为每个线程占有锁的时间很短，线程挂起再唤醒得不偿失。")]),t._v(" "),v("p",[v("strong",[t._v("适应性自旋锁")]),t._v("：自旋的次数不再是固定的，它是由前一次在同一个锁上的自旋时间及锁的拥有者的状态来决定。自旋成功，则可以增加自旋次数，如果获取锁经常失败，那么自旋次数会减少。")]),t._v(" "),v("p",[v("strong",[t._v("锁消除")]),t._v("：若不存在数据竞争的情况，JVM 会消除锁机制。判断依据：变量逃逸。")]),t._v(" "),v("p",[v("strong",[t._v("锁粗化")]),t._v("：将多个连续的加锁、解锁操作连接在一起，扩展成一个范围更大的锁，避免频繁申请和释放锁。例如 for 循环内部获取锁。")]),t._v(" "),v("p",[v("strong",[t._v("轻量级锁")]),t._v("：在没有多线程竞争的前提下，减少传统的重量级锁使用操作系统互斥量产生的性能消耗。通过 CAS 来获取锁和释放锁。对于绝大部分的锁，在整个生命周期内都是不会存在竞争的。")]),t._v(" "),v("p",[v("strong",[t._v("偏向锁")]),t._v("：为了在无多线程竞争的情况下尽量减少不必要的轻量级锁执行路径。主要尽可能避免不必须要的 CAS 操作，如果竞争锁失败，则升级为轻量级锁。")]),t._v(" "),v("h2",{attrs:{id:"volatile"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#volatile"}},[t._v("#")]),t._v(" volatile")]),t._v(" "),v("p",[t._v("对一个 volatile 的读，总可以看到对这个变量最终的写，即被 volatile 修饰的变量。 对单个读/写具有原子性（32 位 Long、Double），但是复合操作除外，例如 i++。")]),t._v(" "),v("p",[t._v("当写一个 volatile 变量时，JMM 会把该线程对应的本地内存中的共享变量值立即刷新到主内存中。当读一个 volatile 变量时，JMM 会把该线程对应的本地内存设置为无效，直接从主内存中读取共享变量。")])])}),[],!1,null,null,null);r.default=o.exports}}]);