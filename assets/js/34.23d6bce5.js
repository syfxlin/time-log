(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{524:function(t,r,s){"use strict";s.r(r);var e=s(6),n=Object(e.a)({},(function(){var t=this,r=t.$createElement,s=t._self._c||r;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"介绍"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#介绍"}},[t._v("#")]),t._v(" 介绍")]),t._v(" "),s("p",[s("strong",[t._v("意图")]),t._v("：主要将数据结构与数据操作分离。")]),t._v(" "),s("p",[s("strong",[t._v("主要解决问题")]),t._v("：稳定的数据结构和易变的操作耦合问题。")]),t._v(" "),s("p",[s("strong",[t._v("实现方式")]),t._v("：在被访问的类里面加一个对外提供接待访问者的接口。")]),t._v(" "),s("p",[s("strong",[t._v("关键代码")]),t._v("：在数据基础类里面有一个方法接受访问者，将自身引用传入访问者。")]),t._v(" "),s("p",[s("strong",[t._v("优点")]),t._v("： 1、符合单一职责原则。 2、优秀的扩展性。 3、灵活性。")]),t._v(" "),s("p",[s("strong",[t._v("缺点")]),t._v("：1、具体元素对访问者公布细节，违反了迪米特原则。 2、具体元素变更比较困难。 3、违反了依赖倒置原则，依赖了具体类，没有依赖抽象。")]),t._v(" "),s("p",[s("strong",[t._v("使用场景")]),t._v('： 1、对象结构中对象对应的类很少改变，但经常需要在此对象结构上定义新的操作。 2、需要对一个对象结构中的对象进行很多不同的并且不相关的操作，而需要避免让这些操作"污染"这些对象的类，也不希望在增加新操作时修改这些类。')]),t._v(" "),s("h2",{attrs:{id:"代码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#代码"}},[t._v("#")]),t._v(" 代码")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://github.com/syfxlin/code/blob/master/design-pattern-java/src/main/java/me/ixk/design_pattern/visitor",target:"_blank",rel:"noopener noreferrer"}},[t._v("代码"),s("OutboundLink")],1)])])}),[],!1,null,null,null);r.default=n.exports}}]);