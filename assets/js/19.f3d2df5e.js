(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{509:function(t,r,e){"use strict";e.r(r);var n=e(6),s=Object(n.a)({},(function(){var t=this,r=t.$createElement,e=t._self._c||r;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"介绍"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#介绍"}},[t._v("#")]),t._v(" 介绍")]),t._v(" "),e("p",[e("strong",[t._v("意图")]),t._v("：动态地给一个对象添加一些额外的职责。就增加功能来说，装饰器模式相比生成子类更为灵活。")]),t._v(" "),e("p",[e("strong",[t._v("主要解决问题")]),t._v("：一般的，我们为了扩展一个类经常使用继承方式实现，由于继承为类引入静态特征，并且随着扩展功能的增多，子类会很膨胀。")]),t._v(" "),e("p",[e("strong",[t._v("实现方式")]),t._v("：将具体功能职责划分，同时继承装饰者模式。")]),t._v(" "),e("p",[e("strong",[t._v("关键代码")]),t._v("：用组合代替继承，将源对象传入装饰类中。")]),t._v(" "),e("p",[e("strong",[t._v("优点")]),t._v("：装饰类和被装饰类可以独立发展，不会相互耦合，装饰模式是继承的一个替代模式，装饰模式可以动态扩展一个实现类的功能。")]),t._v(" "),e("p",[e("strong",[t._v("缺点")]),t._v("：多层装饰比较复杂。")]),t._v(" "),e("p",[e("strong",[t._v("使用场景")]),t._v("：")]),t._v(" "),e("ol",[e("li",[t._v("扩展一个类的功能。")]),t._v(" "),e("li",[t._v("动态增加功能，动态撤销。")])]),t._v(" "),e("h2",{attrs:{id:"代码"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#代码"}},[t._v("#")]),t._v(" 代码")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://github.com/syfxlin/code/blob/master/design-pattern-java/src/main/java/me/ixk/design_pattern/decorator",target:"_blank",rel:"noopener noreferrer"}},[t._v("代码"),e("OutboundLink")],1)])])}),[],!1,null,null,null);r.default=s.exports}}]);